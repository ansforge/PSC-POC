/*
 * eSignSante
 * API du composant eSignSante. <br>Ce composant dit de \"signature\" mutualise et homogénéise la mise en oeuvre des besoins autour de la signature. <br>Il permet de signer des documents ainsi que de vérifier la validité d'une signature ou d'un certificat.    <br>
 *
 * OpenAPI spec version: 2.5.0.11
 * Contact: esignsante@asipsante.fr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fr.ans.esignsante.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import fr.ans.esignsante.model.ConfProof;
import fr.ans.esignsante.model.ConfSign;
import fr.ans.esignsante.model.ConfVerifCert;
import fr.ans.esignsante.model.ConfVerifSign;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
/**
 * Listes des différentes configurations
 */
@Schema(description = "Listes des différentes configurations")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-04T13:37:15.229Z[GMT]")
public class Conf implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("signature")
  private List<ConfSign> signature = null;

  @JsonProperty("signatureVerification")
  private List<ConfVerifSign> signatureVerification = null;

  @JsonProperty("certificatVerification")
  private List<ConfVerifCert> certificatVerification = null;

  @JsonProperty("proof")
  private List<ConfProof> proof = null;

  public Conf signature(List<ConfSign> signature) {
    this.signature = signature;
    return this;
  }

  public Conf addSignatureItem(ConfSign signatureItem) {
    if (this.signature == null) {
      this.signature = new ArrayList<ConfSign>();
    }
    this.signature.add(signatureItem);
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @Schema(description = "")
  public List<ConfSign> getSignature() {
    return signature;
  }

  public void setSignature(List<ConfSign> signature) {
    this.signature = signature;
  }

  public Conf signatureVerification(List<ConfVerifSign> signatureVerification) {
    this.signatureVerification = signatureVerification;
    return this;
  }

  public Conf addSignatureVerificationItem(ConfVerifSign signatureVerificationItem) {
    if (this.signatureVerification == null) {
      this.signatureVerification = new ArrayList<ConfVerifSign>();
    }
    this.signatureVerification.add(signatureVerificationItem);
    return this;
  }

   /**
   * Get signatureVerification
   * @return signatureVerification
  **/
  @Schema(description = "")
  public List<ConfVerifSign> getSignatureVerification() {
    return signatureVerification;
  }

  public void setSignatureVerification(List<ConfVerifSign> signatureVerification) {
    this.signatureVerification = signatureVerification;
  }

  public Conf certificatVerification(List<ConfVerifCert> certificatVerification) {
    this.certificatVerification = certificatVerification;
    return this;
  }

  public Conf addCertificatVerificationItem(ConfVerifCert certificatVerificationItem) {
    if (this.certificatVerification == null) {
      this.certificatVerification = new ArrayList<ConfVerifCert>();
    }
    this.certificatVerification.add(certificatVerificationItem);
    return this;
  }

   /**
   * Get certificatVerification
   * @return certificatVerification
  **/
  @Schema(description = "")
  public List<ConfVerifCert> getCertificatVerification() {
    return certificatVerification;
  }

  public void setCertificatVerification(List<ConfVerifCert> certificatVerification) {
    this.certificatVerification = certificatVerification;
  }

  public Conf proof(List<ConfProof> proof) {
    this.proof = proof;
    return this;
  }

  public Conf addProofItem(ConfProof proofItem) {
    if (this.proof == null) {
      this.proof = new ArrayList<ConfProof>();
    }
    this.proof.add(proofItem);
    return this;
  }

   /**
   * Get proof
   * @return proof
  **/
  @Schema(description = "")
  public List<ConfProof> getProof() {
    return proof;
  }

  public void setProof(List<ConfProof> proof) {
    this.proof = proof;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Conf conf = (Conf) o;
    return Objects.equals(this.signature, conf.signature) &&
        Objects.equals(this.signatureVerification, conf.signatureVerification) &&
        Objects.equals(this.certificatVerification, conf.certificatVerification) &&
        Objects.equals(this.proof, conf.proof);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signature, signatureVerification, certificatVerification, proof);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Conf {\n");
    
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    signatureVerification: ").append(toIndentedString(signatureVerification)).append("\n");
    sb.append("    certificatVerification: ").append(toIndentedString(certificatVerification)).append("\n");
    sb.append("    proof: ").append(toIndentedString(proof)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
