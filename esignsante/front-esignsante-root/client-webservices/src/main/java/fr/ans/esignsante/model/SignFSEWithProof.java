/*
 * eSignSante
 * API du composant eSignSante. <br>Ce composant dit de \"signature\" mutualise et homogénéise la mise en oeuvre des besoins autour de la signature. <br>Il permet de signer des documents ainsi que de vérifier la validité d'une signature ou d'un certificat.    <br>
 *
 * OpenAPI spec version: 2.5.0.11
 * Contact: esignsante@asipsante.fr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fr.ans.esignsante.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
/**
 * SignFSEWithProof
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-04T13:37:15.229Z[GMT]")
public class SignFSEWithProof implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("secret")
  private String secret = null;

  @JsonProperty("idSignConf")
  private Long idSignConf = null;

  @JsonProperty("hash")
  private String hash = null;

  @JsonProperty("idFacturationPS")
  private String idFacturationPS = null;

  @JsonProperty("typeFlux")
  private String typeFlux = null;

  @JsonProperty("signers")
  private List<String> signers = null;

  @JsonProperty("idVerifSignConf")
  private Long idVerifSignConf = null;

  @JsonProperty("requestId")
  private String requestId = null;

  @JsonProperty("proofTag")
  private String proofTag = null;

  @JsonProperty("applicantId")
  private String applicantId = null;

  public SignFSEWithProof secret(String secret) {
    this.secret = secret;
    return this;
  }

   /**
   * Secret
   * @return secret
  **/
  @Schema(required = true, description = "Secret")
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }

  public SignFSEWithProof idSignConf(Long idSignConf) {
    this.idSignConf = idSignConf;
    return this;
  }

   /**
   * Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour la signature (appel de l&#x27;opération \&quot;/configurations\&quot;).
   * @return idSignConf
  **/
  @Schema(required = true, description = "Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour la signature (appel de l'opération \"/configurations\").")
  public Long getIdSignConf() {
    return idSignConf;
  }

  public void setIdSignConf(Long idSignConf) {
    this.idSignConf = idSignConf;
  }

  public SignFSEWithProof hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * hash à signer.
   * @return hash
  **/
  @Schema(required = true, description = "hash à signer.")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public SignFSEWithProof idFacturationPS(String idFacturationPS) {
    this.idFacturationPS = idFacturationPS;
    return this;
  }

   /**
   * identifiant de facturation du personnel de Sante à l&#x27;origine de la demande de signature
   * @return idFacturationPS
  **/
  @Schema(required = true, description = "identifiant de facturation du personnel de Sante à l'origine de la demande de signature")
  public String getIdFacturationPS() {
    return idFacturationPS;
  }

  public void setIdFacturationPS(String idFacturationPS) {
    this.idFacturationPS = idFacturationPS;
  }

  public SignFSEWithProof typeFlux(String typeFlux) {
    this.typeFlux = typeFlux;
    return this;
  }

   /**
   * type de flux (valeur T ou R)
   * @return typeFlux
  **/
  @Schema(required = true, description = "type de flux (valeur T ou R)")
  public String getTypeFlux() {
    return typeFlux;
  }

  public void setTypeFlux(String typeFlux) {
    this.typeFlux = typeFlux;
  }

  public SignFSEWithProof signers(List<String> signers) {
    this.signers = signers;
    return this;
  }

  public SignFSEWithProof addSignersItem(String signersItem) {
    if (this.signers == null) {
      this.signers = new ArrayList<String>();
    }
    this.signers.add(signersItem);
    return this;
  }

   /**
   * Liste des signataires délégataires. L&#x27;IHM swagger ne gère qu&#x27;1 seul signer - pour gérer plusieurs signers, rajouter des paramètres à la requête CURL.&lt;br&gt;Exemple: curl -X POST [...] -F \&quot;signers&#x3D;Dupont\&quot; -F \&quot;signers&#x3D;Dupond\&quot;
   * @return signers
  **/
  @Schema(description = "Liste des signataires délégataires. L'IHM swagger ne gère qu'1 seul signer - pour gérer plusieurs signers, rajouter des paramètres à la requête CURL.<br>Exemple: curl -X POST [...] -F \"signers=Dupont\" -F \"signers=Dupond\"")
  public List<String> getSigners() {
    return signers;
  }

  public void setSigners(List<String> signers) {
    this.signers = signers;
  }

  public SignFSEWithProof idVerifSignConf(Long idVerifSignConf) {
    this.idVerifSignConf = idVerifSignConf;
    return this;
  }

   /**
   * Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour la vérification de signature (appel de l&#x27;opération \&quot;/configurations\&quot;).
   * @return idVerifSignConf
  **/
  @Schema(required = true, description = "Identifiant de configuration à sélectionner parmi la liste des configurations disponibles pour la vérification de signature (appel de l'opération \"/configurations\").")
  public Long getIdVerifSignConf() {
    return idVerifSignConf;
  }

  public void setIdVerifSignConf(Long idVerifSignConf) {
    this.idVerifSignConf = idVerifSignConf;
  }

  public SignFSEWithProof requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifiant de la demande pour renseigner l&#x27;élément RequestId de la preuve.
   * @return requestId
  **/
  @Schema(description = "Identifiant de la demande pour renseigner l'élément RequestId de la preuve.")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public SignFSEWithProof proofTag(String proofTag) {
    this.proofTag = proofTag;
    return this;
  }

   /**
   * Tag utilisé pour renseigner l&#x27;élément Tag de la preuve.
   * @return proofTag
  **/
  @Schema(description = "Tag utilisé pour renseigner l'élément Tag de la preuve.")
  public String getProofTag() {
    return proofTag;
  }

  public void setProofTag(String proofTag) {
    this.proofTag = proofTag;
  }

  public SignFSEWithProof applicantId(String applicantId) {
    this.applicantId = applicantId;
    return this;
  }

   /**
   * Identifiant xxx du demandeur utilisé pour renseigner le champ applicantId de la preuve.
   * @return applicantId
  **/
  @Schema(description = "Identifiant xxx du demandeur utilisé pour renseigner le champ applicantId de la preuve.")
  public String getApplicantId() {
    return applicantId;
  }

  public void setApplicantId(String applicantId) {
    this.applicantId = applicantId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignFSEWithProof signFSEWithProof = (SignFSEWithProof) o;
    return Objects.equals(this.secret, signFSEWithProof.secret) &&
        Objects.equals(this.idSignConf, signFSEWithProof.idSignConf) &&
        Objects.equals(this.hash, signFSEWithProof.hash) &&
        Objects.equals(this.idFacturationPS, signFSEWithProof.idFacturationPS) &&
        Objects.equals(this.typeFlux, signFSEWithProof.typeFlux) &&
        Objects.equals(this.signers, signFSEWithProof.signers) &&
        Objects.equals(this.idVerifSignConf, signFSEWithProof.idVerifSignConf) &&
        Objects.equals(this.requestId, signFSEWithProof.requestId) &&
        Objects.equals(this.proofTag, signFSEWithProof.proofTag) &&
        Objects.equals(this.applicantId, signFSEWithProof.applicantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(secret, idSignConf, hash, idFacturationPS, typeFlux, signers, idVerifSignConf, requestId, proofTag, applicantId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignFSEWithProof {\n");
    
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    idSignConf: ").append(toIndentedString(idSignConf)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    idFacturationPS: ").append(toIndentedString(idFacturationPS)).append("\n");
    sb.append("    typeFlux: ").append(toIndentedString(typeFlux)).append("\n");
    sb.append("    signers: ").append(toIndentedString(signers)).append("\n");
    sb.append("    idVerifSignConf: ").append(toIndentedString(idVerifSignConf)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    proofTag: ").append(toIndentedString(proofTag)).append("\n");
    sb.append("    applicantId: ").append(toIndentedString(applicantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
