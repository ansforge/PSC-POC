/*
 * eSignSante
 * API du composant eSignSante. <br>Ce composant dit de \"signature\" mutualise et homogénéise la mise en oeuvre des besoins autour de la signature. <br>Il permet de signer des documents ainsi que de vérifier la validité d'une signature ou d'un certificat.    <br>
 *
 * OpenAPI spec version: 2.5.0.11
 * Contact: esignsante@asipsante.fr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fr.ans.esignsante.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.Serializable;
/**
 * ConfProof
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-04T13:37:15.229Z[GMT]")
public class ConfProof implements Serializable{
  private static final long serialVersionUID = 1L;
  @JsonProperty("idProofConf")
  private Long idProofConf = null;

  @JsonProperty("description")
  private String description = null;

  /**
   * Gets or Sets signaturePackagingForProof
   */
  public enum SignaturePackagingForProofEnum {
    ENVELOPING("ENVELOPING"),
    ENVELOPED("ENVELOPED");

    private String value;

    SignaturePackagingForProofEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SignaturePackagingForProofEnum fromValue(String input) {
      for (SignaturePackagingForProofEnum b : SignaturePackagingForProofEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("signaturePackagingForProof")
  private SignaturePackagingForProofEnum signaturePackagingForProof = null;

  /**
   * Gets or Sets digestAlgorithmForProof
   */
  public enum DigestAlgorithmForProofEnum {
    SHA1("SHA1"),
    SHA256("SHA256"),
    SHA512("SHA512");

    private String value;

    DigestAlgorithmForProofEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static DigestAlgorithmForProofEnum fromValue(String input) {
      for (DigestAlgorithmForProofEnum b : DigestAlgorithmForProofEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("digestAlgorithmForProof")
  private DigestAlgorithmForProofEnum digestAlgorithmForProof = null;

  /**
   * Gets or Sets canonicalisationAlgorithmForProof
   */
  public enum CanonicalisationAlgorithmForProofEnum {
    TR_2001_REC_XML_C14N_20010315("http://www.w3.org/TR/2001/REC-xml-c14n-20010315"),
    TR_2001_REC_XML_C14N_20010315_WITHCOMMENTS("http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"),
    _2001_10_XML_EXC_C14N_("http://www.w3.org/2001/10/xml-exc-c14n#"),
    _2001_10_XML_EXC_C14N_WITHCOMMENTS("http://www.w3.org/2001/10/xml-exc-c14n#WithComments");

    private String value;

    CanonicalisationAlgorithmForProofEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static CanonicalisationAlgorithmForProofEnum fromValue(String input) {
      for (CanonicalisationAlgorithmForProofEnum b : CanonicalisationAlgorithmForProofEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("canonicalisationAlgorithmForProof")
  private CanonicalisationAlgorithmForProofEnum canonicalisationAlgorithmForProof = null;

  @JsonProperty("dn")
  private String dn = null;

  public ConfProof idProofConf(Long idProofConf) {
    this.idProofConf = idProofConf;
    return this;
  }

   /**
   * Identifiant de configuration. Cet identifiant est utilisé par le service de génération de preuve.
   * @return idProofConf
  **/
  @Schema(required = true, description = "Identifiant de configuration. Cet identifiant est utilisé par le service de génération de preuve.")
  public Long getIdProofConf() {
    return idProofConf;
  }

  public void setIdProofConf(Long idProofConf) {
    this.idProofConf = idProofConf;
  }

  public ConfProof description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description de la configuration de la génération de la preuve.
   * @return description
  **/
  @Schema(required = true, description = "Description de la configuration de la génération de la preuve.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ConfProof signaturePackagingForProof(SignaturePackagingForProofEnum signaturePackagingForProof) {
    this.signaturePackagingForProof = signaturePackagingForProof;
    return this;
  }

   /**
   * Get signaturePackagingForProof
   * @return signaturePackagingForProof
  **/
  @Schema(required = true, description = "")
  public SignaturePackagingForProofEnum getSignaturePackagingForProof() {
    return signaturePackagingForProof;
  }

  public void setSignaturePackagingForProof(SignaturePackagingForProofEnum signaturePackagingForProof) {
    this.signaturePackagingForProof = signaturePackagingForProof;
  }

  public ConfProof digestAlgorithmForProof(DigestAlgorithmForProofEnum digestAlgorithmForProof) {
    this.digestAlgorithmForProof = digestAlgorithmForProof;
    return this;
  }

   /**
   * Get digestAlgorithmForProof
   * @return digestAlgorithmForProof
  **/
  @Schema(required = true, description = "")
  public DigestAlgorithmForProofEnum getDigestAlgorithmForProof() {
    return digestAlgorithmForProof;
  }

  public void setDigestAlgorithmForProof(DigestAlgorithmForProofEnum digestAlgorithmForProof) {
    this.digestAlgorithmForProof = digestAlgorithmForProof;
  }

  public ConfProof canonicalisationAlgorithmForProof(CanonicalisationAlgorithmForProofEnum canonicalisationAlgorithmForProof) {
    this.canonicalisationAlgorithmForProof = canonicalisationAlgorithmForProof;
    return this;
  }

   /**
   * Get canonicalisationAlgorithmForProof
   * @return canonicalisationAlgorithmForProof
  **/
  @Schema(required = true, description = "")
  public CanonicalisationAlgorithmForProofEnum getCanonicalisationAlgorithmForProof() {
    return canonicalisationAlgorithmForProof;
  }

  public void setCanonicalisationAlgorithmForProof(CanonicalisationAlgorithmForProofEnum canonicalisationAlgorithmForProof) {
    this.canonicalisationAlgorithmForProof = canonicalisationAlgorithmForProof;
  }

  public ConfProof dn(String dn) {
    this.dn = dn;
    return this;
  }

   /**
   * DN du certificat qui sera utilisé pour signer la preuve.
   * @return dn
  **/
  @Schema(required = true, description = "DN du certificat qui sera utilisé pour signer la preuve.")
  public String getDn() {
    return dn;
  }

  public void setDn(String dn) {
    this.dn = dn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfProof confProof = (ConfProof) o;
    return Objects.equals(this.idProofConf, confProof.idProofConf) &&
        Objects.equals(this.description, confProof.description) &&
        Objects.equals(this.signaturePackagingForProof, confProof.signaturePackagingForProof) &&
        Objects.equals(this.digestAlgorithmForProof, confProof.digestAlgorithmForProof) &&
        Objects.equals(this.canonicalisationAlgorithmForProof, confProof.canonicalisationAlgorithmForProof) &&
        Objects.equals(this.dn, confProof.dn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idProofConf, description, signaturePackagingForProof, digestAlgorithmForProof, canonicalisationAlgorithmForProof, dn);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfProof {\n");
    
    sb.append("    idProofConf: ").append(toIndentedString(idProofConf)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    signaturePackagingForProof: ").append(toIndentedString(signaturePackagingForProof)).append("\n");
    sb.append("    digestAlgorithmForProof: ").append(toIndentedString(digestAlgorithmForProof)).append("\n");
    sb.append("    canonicalisationAlgorithmForProof: ").append(toIndentedString(canonicalisationAlgorithmForProof)).append("\n");
    sb.append("    dn: ").append(toIndentedString(dn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
